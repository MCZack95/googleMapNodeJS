extends layout

block content

    style.
        #map {
            width: 90%;
            height: 500px;
            margin-left:100px;
            margin-right:100px;
            border: 2px solid #000000;
        }

        #map_title {
            margin-top: 20px;
            margin-left: 20px;
        }

        #location-form {
            margin-left: 20px;
        }

        #location-input {
            width: 30%;
        }

        #prev_btn {
            width: 150px;
            background-color: #FFAA00;
            border: 1px solid #000000;
            margin-left: 40%;
            margin-right: 50px;
        }

        #next_btn {
            width: 150px;
            background-color: #00AAFF;
            border: 1px solid #000000;
            margin-left: 50px;
        }

        #prev_btn:active {
            background-color: #FFAA00;
            box-shadow: 0 5px #666;
            transform: translateY(4px);
        }

        #next_btn:active {
            background-color: #00AAFF;
            box-shadow: 0 5px #666;
            transform: translateY(4px);
        }

    h1#map_title Google Map
    
    // Check if address is valid and doesn't exist, then add it to database
    form(id="location-form")
        br
        input(id="location-input", type="text", name="Address", size="37", placeholder="Enter location address here...", required="true")
        br
        br
        button.btn.btn-primary(id="location-btn", type="submit") Submit
        br
        br

    #map
    br

    button.btn.btn.primary(id="prev_btn", align='middle') Previous Marker 
    button.btn.btn.primary(id="next_btn", align='middle') Next Marker

    // Map Logic
    script.

        var map;
        var num = #{noOfAddress};
        var addressList = [];

        var myButton = document.getElementById('location-btn');
        var locationForm = document.getElementById('location-form');
        locationForm.addEventListener('submit', geocode);

        var prevBtn = document.getElementById('prev_btn');
        var nextBtn = document.getElementById('next_btn');
        prevBtn.addEventListener('click', prevMarker);
        nextBtn.addEventListener('click', nextMarker);
        var currentMarker = {};
        var markerCounter = 0;

        // Checks if Address is Valid, then displays an alert box which
        // includes it's location, latitude, longitude
        function geocode(e){
            e.preventDefault();
            var location = document.getElementById('location-input').value;
            axios.get('https://maps.googleapis.com/maps/api/geocode/json',{
                params:{
                    address: location,
                    key: 'AIzaSyDdPOsbD2Dg8qse475kMZjuhmEWz0wcp9c'
                }
            })
            .then(function(response){ // If Address is valid
                console.log(response);
                alert(`Location: ${response.data.results[0].formatted_address.replace(/,/g, '')}
                \nLatitude: ${response.data.results[0].geometry.location.lat}
                \nLongitude: ${response.data.results[0].geometry.location.lng}`);
            })
            .catch(function(err){ // If Address is not valid
                console.log(err);
                alert("Address doesn't exist!");
            });
        }

        function prevMarker(){
            if(markerCounter == 0){
                markerCounter = numOfValidAddress(addressList) - 1;
                var latLng = new google.maps.LatLng(addressList[markerCounter].lat, addressList[markerCounter].lng);
                map.panTo(latLng);
            }else{
                markerCounter--;
                var latLng = new google.maps.LatLng(addressList[markerCounter].lat, addressList[markerCounter].lng);
                map.panTo(latLng);
            }
        }

        function nextMarker(){
            if(markerCounter == numOfValidAddress(addressList) - 1){
                markerCounter = 0;
                var latLng = new google.maps.LatLng(addressList[markerCounter].lat, addressList[markerCounter].lng);
                map.panTo(latLng);
            }else{
                markerCounter++;
                var latLng = new google.maps.LatLng(addressList[markerCounter].lat, addressList[markerCounter].lng);
                map.panTo(latLng);
            }
        }

        function initMap() {
            initVars();

            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 1.352083, lng: 103.819836 }, // LatLng of Singapore
                zoom: 11.5
            });

            addressList.forEach(function(sc) {
                if(sc.address != ""){
                    var marker = new google.maps.Marker({
                        position: new google.maps.LatLng(sc.lat,sc.lng),
                        map: map,
                        title: sc.address,
                        animation: google.maps.Animation.DROP,
                        icon: {
                            url: parseIcon(sc.type),
                            scaledSized: new google.maps.Size(23, 33)
                        }
                    });
                    var infoWindow = new google.maps.InfoWindow({
                        content: `Location: ${sc.address}, Lat: ${sc.lat} ,Lng: ${sc.lng}`
                    });
                    marker.addListener('click', function(){
                        infoWindow.open(map, marker);
                    });
                    if(isEmpty(currentMarker)){
                        currentMarker.address = sc.address;
                        currentMarker.lat = sc.lat;
                        currentMarker.lng = sc.lng;
                    } 
                }
            });
        }

        function parseIcon(type){
            if(type == 1){ // Terrorist
                return 'assets/img/maps/terrorist.png';
            }else if(type == 2){ // Mosquito
                return 'assets/img/maps/mozzie.png';
            }else if(type == 3){ // Haze
                return 'assets/img/maps/haze.png';
            }else{
                // default icon
            }
        }

        function isEmpty(obj){
            for(var key in obj){
                if(obj.hasOwnProperty(key)){
                    return false;
                }
            }
            return true;
        }

        function numOfValidAddress(obj){
            var counter = 0;
            obj.forEach(function(element){
                if(element.address != ""){
                    counter++;
                }
            });
            return counter;
        }

        // Initialize all data from DB
        function initVars(){
            var addressString = "#{addressArrayString}";
            var latString = "#{latArrayString}";
            var lngString = "#{lngArrayString}";
            var typeString = "#{typeArrayString}";

            var addressArray = addressString.split('-');
            var latArray = latString.split('-');
            var lngArray = lngString.split('-');
            var typeArray = typeString.split('-');
            var arrayCounter = 0;

            addressArray.forEach(function(element){
                var locationDetails = {};
                locationDetails.address = addressArray[arrayCounter];
                locationDetails.lat = latArray[arrayCounter];
                locationDetails.lng = lngArray[arrayCounter];
                locationDetails.type = typeArray[arrayCounter];
                addressList.push(locationDetails);
                arrayCounter++;
            });
        }

    script(async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDdPOsbD2Dg8qse475kMZjuhmEWz0wcp9c&callback=initMap")

